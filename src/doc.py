doc_str = '''Usage : ./html2js.py <input_html> <output_js>

This script takes as input a html file and writes to a file a js function that generates the given html


Positional arguments:
	input_html						: Input file with the html code
	output_js 						: Output file with the generated js function


Optional arguments:
	-h / --help						: Show help message and exit
	-d / --doc						: Show extended documentation and exit
	-f function_name / --function-name function_name	: Set the name of the generated function
	-t test_file / --test test_file				: Generate a html test file
								  This option will raise a warning if is used with params of type element
	-v / --verbose						: Display generated js code in stdout
	-p / --param						: Parametrize some content of the given html as a function argument
								  Syntax : --param <pattern> <type> [optional_flags]. Where:
								  This argument can be used as many times as desired
	-i n_tabs / --indent n_tabs				: Starting indent in tabs. (Function content will add another tab)
	--template-file template				: Template file used for the autogenerated tests files
	--supress-warning					: Supress the generated warning when creating a test file with element type params
	--remove-coments					: Remove the comments before the function declaration

Additional info:
- Param argument elements:
	Required :
		- Pattern : Text to match in the html file and be replaced by a parameter
		- Type : One of 'element' or 'text'.
			If element, the param is added as a DOM element (i.e. appendChild(param))
			If text, the param is added as textNode (i.e. appendChild(document.createTextNode(param)))

	Optional :
		Optional flags must be supplied as flag_name=flag_value
		- variable_name : Name of the variable in the function declaration
			Example : -p <pattern> <type> variable_name=param_1

	Notes :
		- One argument pattern can be in more than one place of the html file.
			If so, the argument value will be used in more than one place in the generated html

		- If variable_name flag is not used, arguments will follow the format 'param_<num>'
			num increment is done based on the argument place.
			Examples :
				If no argument is named : function func(param_1, param_2, param_3, ...)
				One argument is named   : function func(param_1, myparam, param_3, ...)

- Inside the function the temporal created variables will be named based on the element id if there is one.
	If not, they will be incrementally named based on the tag name with the format '<tag>_<num>'
	Example :
		The first div does not have an id. It will be declared as 'let div_1 = ...'
		The second div does have an id, which is 'mydiv'. It will be declared as 'let mydiv = ...'
		The third div does not have an id. It will be declared as 'let div_2 = ...'
	Text nodes are not created as variables. They are directly appended as child
	Example : mydiv.appendChild(document.createTextNode('divtext'))
'''

usage_examples = '''Usage examples:
	./html2js.py test/html/simple_div.html test/js/simple_div.js -f simple_div -t test/templates/simple_div.html -v
	./html2js.py test/html/service_div.html test/js/service_div.js -f service_div -t test/templates/service_div.html -v
	./html2js.py test/html/parametrized_service_div.html test/js/parametrized_service_div.js -f service_div -t test/templates/parametrized_service_div.html --param SERVICE text variable_name=service_name --param OK text variable_name=num_ok --param WARN text variable_name=num_warnings --param ERR text variable_name=num_errors -v
	./html2js.py -f table_header -v test/html/table_header.html test/js/table_header.js -i 2
	./html2js.py -f table_row -v -i 2 test/html/table_row.html test/js/table_row.js -p FECHA text variable_name=fecha -p CLIENTE text variable_name=cliente -p USER text variable_name=user -p SERVER text variable_name=server -p NAT text variable_name=nat -p DESTINO text variable_name=destino -p DURACION text variable_name=duracion -p START text variable_name=start -p END text variable_name=end
	./html2js.py -f aviso_lentitud -v -i 2 test/html/aviso_lentitud.html test/js/aviso_lentitud.js
'''

repo = 'https://github.com/vLabayen/html2js'
